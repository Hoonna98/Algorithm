문제
N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다. 
당신은 (1, 1)에서 (N, M)의 위치까지 이동하려 하는데, 이때 최단 경로로 이동하려 한다. 
최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데, 이때 시작하는 칸과 끝나는 칸도 포함해서 센다.
만약에 이동하는 도중에 한 개의 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 벽을 한 개 까지 부수고 이동하여도 된다.
한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸이다.
맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오.

입력
첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 1,000)이 주어진다. 다음 N개의 줄에 M개의 숫자로 맵이 주어진다. (1, 1)과 (N, M)은 항상 0이라고 가정하자.

출력
첫째 줄에 최단 거리를 출력한다. 불가능할 때는 -1을 출력한다.

풀이
가장 중요한 것은 벽을 부섰는지에 대한 여부를 담고있는 것과 부수고 왔을때의 최단거리와 그렇지 않았을 때의 최단거리가 공존해야한다.
visited를 3차원으로 표현하면서 부순 것에 대한 길과 그렇지 않은 길에 대해 같이 주어야한다.
이렇게 나누게 되면 부섰을 때의 최단거리와 그렇지 않았을 때의 최단거리를 둘 다 획득할 수 있다.
예를 들어
0000
0100
0000
1111
0000
위의 경우에서 (1,1)->(2,2)->(4,2)->(4,5)로 가는 경우가 가장 먼저 실행이 된다면
(1,1)->(4,1)->(4,5)의 경우를 사용하지 못하게 되기때문에 벽을 지나 온 것의 방문정보를 다르게 주어야한다.