문제
N×M크기의 배열로 표현되는 미로가 있다.
1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1
미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 
이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 
한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.
위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.

입력
첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.

출력
첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.

풀이
처음에는 끝부터 끝까지 이동하는 것이며, 한 곳으로 갔다가 길이없으면 다시 돌아온다는 것에서 
재귀를 이용한 dfs로 가장 멀리있는 것을 찾는 것이 가장 좋은 방법이라고 생각했다.
하지만 이동 방향에 정해진 우선 순위가 없어 dfs로 구현하게 되면 (1,1)부터 (N,M)까지 모든 경우의 수를 전부 방문하고,
그 중 가장 적은 값을 선택해야했다.
dfs 코드를 보면 끝까지 간 후 다른 길을 갈 수 있는 까지 stack을 pop을 하고 그 지점 부터 다시 끝까지 가는 방식이다.
모든 경로를 거치기에 굉장히 비효율적이다.

bfs를 이용해서 한 지점에서 이동할 수 있는 모든 지점까지의 거리를 최단 거리로 기록한다.
(이전 지점에서의 경로까지 길에서 +1을 하면 최단 경로가 완성된다.)
그렇게 미로에 최단거리를 기록하면 결국 가장 먼저 도착하는 경로의 길이가 결과 값이 되게된다.
if inner(x,y,dx[i],dy[i]) and miro[x+dx[i]][y+dy[i]] == '1':
위의 경로의 방문 조건 코드를 보면 미로가 처음 구성된 1로 표시를 하기에 먼저 도착해서 값을 변경하게 되면 늦게 도착한 곳은 값을 변경시키지 못한다.

시간 복잡도 : O(이동할 수 있는 곳의 수 * 4)
